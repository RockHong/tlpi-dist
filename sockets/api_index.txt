#include <sys/socket.h>
int socket(int domain, int type, int protocol);
    Returns file descriptor on success, or .1 on error

int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
    Returns 0 on success, or .1 on error

int listen(int sockfd, int backlog);
    Returns 0 on success, or .1 on error

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
    Returns file descriptor on success, or .1 on error

int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
    Returns 0 on success, or .1 on error

ssize_t recvfrom(int sockfd, void *buffer, size_t length, int flags,
                    struct sockaddr *src_addr, socklen_t *addrlen);
    Returns number of bytes received, 0 on EOF, or .1 on error
ssize_t sendto(int sockfd, const void *buffer, size_t length, int flags,
                    const struct sockaddr *dest_addr, socklen_t addrlen);
    Returns number of bytes sent, or .1 on error

int socketpair(int domain, int type, int protocol, int sockfd[2]);
    Returns 0 on success, or .1 on error

int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
    Both return 0 on success, or .1 on error

ssize_t recv(int sockfd, void *buffer, size_t length, int flags);
    Returns number of bytes received, 0 on EOF, or .1 on error
ssize_t send(int sockfd, const void *buffer, size_t length, int flags);
    Returns number of bytes sent, or .1 on error

int getsockopt(int sockfd, int level, int optname, void *optval,
socklen_t *optlen);
int setsockopt(int sockfd, int level, int optname, const void *optval,
socklen_t optlen);
    Both return 0 on success, or .1 on error

int shutdown(int sockfd, int how);
    Returns 0 on success, or .1 on error

--------
-----------
#include <sys/un.h>  ??
---------
--------------
#include <arpa/inet.h>
uint16_t htons(uint16_t host_uint16);
Returns host_uint16 converted to network byte order
uint32_t htonl(uint32_t host_uint32);
Returns host_uint32 converted to network byte order
uint16_t ntohs(uint16_t net_uint16);
Returns net_uint16 converted to host byte order
uint32_t ntohl(uint32_t net_uint32);
Returns net_uint32 converted to host byte order
-----------
#include <arpa/inet.h>
int inet_pton(int domain, const char *src_str, void *addrptr);
Returns 1 on successful conversion, 0 if src_str is not in
presentation format, or .1 on error
const char *inet_ntop(int domain, const void *addrptr, char *dst_str, size_t len);
Returns pointer to dst_str on success, or NULL on error
-------------
#include <netinet/in.h>  ??
------------
#include <sys/socket.h>
#include <netdb.h>
int getaddrinfo(const char *host, const char *service,
const struct addrinfo *hints, struct addrinfo **result);
Returns 0 on success, or nonzero on error
------------
#include <sys/socket.h>
#include <netdb.h>
void freeaddrinfo(struct addrinfo *result);
------------
#include <netdb.h>
const char *gai_strerror(int errcode);
Returns pointer to string containing error message
------------
#include <sys/socket.h>
#include <netdb.h>
int getnameinfo(const struct sockaddr *addr, socklen_t addrlen, char *host,
size_t hostlen, char *service, size_t servlen, int flags);
Returns 0 on success, or nonzero on error
---------
#include <arpa/inet.h>
int inet_aton(const char *str, struct in_addr *addr);
Returns 1 (true) if str is a valid dotted-decimal address, or 0 (false) on error
-------------
#include <arpa/inet.h>
char *inet_ntoa(struct in_addr addr);
Returns pointer to (statically allocated)
dotted-decimal string version of addr
------------
#include <netdb.h>
extern int h_errno;
struct hostent *gethostbyname(const char *name);
struct hostent *gethostbyaddr(const char *addr, socklen_t len, int type);
Both return pointer to (statically allocated) hostent structure
on success, or NULL on error
-------------
#define _BSD_SOURCE /* Or _SVID_SOURCE or _GNU_SOURCE */
#include <netdb.h>
void herror(const char *str);
const char *hstrerror(int err);
Returns pointer to h_errno error string corresponding to err
-----------
#include <netdb.h>
struct servent *getservbyname(const char *name, const char *proto);
struct servent *getservbyport(int port, const char *proto);
Both return pointer to a (statically allocated) servent structure
on success, or NULL on not found or error
--------------
---------------
-------------
#include <sys/sendfile.h>
ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);
Returns number of bytes transferred, or .1 on error
-----------
------------
-----------
SOMAXCONN in <sys/socket.h>.

<netinet/in.h>.
#define INET_ADDRSTRLEN 16 /* Maximum IPv4 dotted-decimal string */
#define INET6_ADDRSTRLEN 46 /* Maximum IPv6 hexadecimal string */

The <netdb.h> header
NI_MAXHOST
NI_MAXSERV


